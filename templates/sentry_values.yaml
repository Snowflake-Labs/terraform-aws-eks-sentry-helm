---
user:
  create: true
  email: ${sentry_root_user_email}
  password: ${sentry_root_user_password}

nginx:
  enabled: false

rabbitmq:
  enabled: false

sentry:
  existingSecret: ${existing_secret_name}
  existingSecretKey: sentry_secret_key
  web:
    service:
      annotations:
        alb.ingress.kubernetes.io/healthcheck-path: /_health/
        alb.ingress.kubernetes.io/healthcheck-port: traffic-port

relay:
  mode: proxy
  service:
    annotations:
      alb.ingress.kubernetes.io/healthcheck-path: /api/relay/healthcheck/ready/
      alb.ingress.kubernetes.io/healthcheck-port: traffic-port

ingress:
  enabled: false

zookeeper:
  autopurge:
    purgeInterval: 6
    snapRetainCount: 3
  persistence:
    size: 30Gi
%{ if image_zookeeper != null ~}
  image:
    registry: ${image_zookeeper["registry"]}
    repository: ${image_zookeeper["repository"]}
%{ endif ~}

postgresql:
  enabled: false

externalPostgresql:
  host: ${postgres_db_host}
  port: ${postgres_db_port}
  database: ${postgres_db_name}
  username: ${postgres_username}
  password: "${postgres_password}"

%{ if smtp_enable == true ~}
mail:
  backend: smtp
  useTls: true
  from: ${sentry_root_user_email}
  host: ${smtp_host}
  port: 587
  username: ${smtp_username}
  password: ${smtp_password}
%{ endif ~}

system:
  url: "https://${dns_name}"
  adminEmail: "${sentry_root_user_email}"
  public: false

%{ if slack_enable == true ~}
slack:
  clientId: "${sentry_slack_client_id}"
  clientSecret: "${sentry_slack_client_secret}"
  signingSecret: "${sentry_slack_signing_secret}"
%{ endif ~}

hooks:
  activeDeadlineSeconds: 600
%{ if image_dbCheck != null ~}
  dbCheck:
    image:
      repository: ${image_dbCheck["registry"]}/${image_dbCheck["repository"]}
%{ endif ~}

%{ if anytrue([image_sentry != null, image_snuba != null, image_relay != null]) ~}
images:
%{ if image_sentry != null ~}
  sentry:
    repository: ${image_sentry["registry"]}/${image_sentry["repository"]}
%{ endif ~}

%{ if image_snuba != null ~}
  snuba:
    repository: ${image_snuba["registry"]}/${image_snuba["repository"]}
%{ endif ~}

%{ if image_relay != null ~}
  relay:
    repository: ${image_relay["registry"]}/${image_relay["repository"]}
%{ endif ~}
%{ endif ~}

%{ if image_redis != null ~}
redis:
  image:
    registry: ${image_redis["registry"]}
    repository: ${image_redis["repository"]}
%{ endif ~}

%{ if image_kafka != null ~}
kafka:
  image:
    registry: ${image_kafka["registry"]}
    repository: ${image_kafka["repository"]}
%{ endif ~}

%{ if image_kafka_zookeeper != null ~}
  zookeeper:
    image:
      registry: ${image_kafka_zookeeper["registry"]}
      repository: ${image_kafka_zookeeper["repository"]}
%{ endif ~}

%{ if image_clickhouse != null ~}
clickhouse:
  clickhouse:
    image: ${image_clickhouse["registry"]}/${image_clickhouse["repository"]}
%{ endif ~}
